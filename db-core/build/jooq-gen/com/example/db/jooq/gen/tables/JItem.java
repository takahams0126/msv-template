/*
 * This file is generated by jOOQ.
 */
package com.example.db.jooq.gen.tables;


import com.example.db.jooq.gen.JMsvDb;
import com.example.db.jooq.gen.Keys;
import com.example.db.jooq.gen.tables.records.ItemRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JItem extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = -1251828554;

    /**
     * The reference instance of <code>msv_db.item</code>
     */
    public static final JItem ITEM = new JItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>msv_db.item.id</code>.
     */
    public final TableField<ItemRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>msv_db.item.name</code>.
     */
    public final TableField<ItemRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>msv_db.item</code> table reference
     */
    public JItem() {
        this(DSL.name("item"), null);
    }

    /**
     * Create an aliased <code>msv_db.item</code> table reference
     */
    public JItem(String alias) {
        this(DSL.name(alias), ITEM);
    }

    /**
     * Create an aliased <code>msv_db.item</code> table reference
     */
    public JItem(Name alias) {
        this(alias, ITEM);
    }

    private JItem(Name alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private JItem(Name alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JItem(Table<O> child, ForeignKey<O, ItemRecord> key) {
        super(child, key, ITEM);
    }

    @Override
    public Schema getSchema() {
        return JMsvDb.MSV_DB;
    }

    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemRecord>>asList(Keys.KEY_ITEM_PRIMARY);
    }

    @Override
    public JItem as(String alias) {
        return new JItem(DSL.name(alias), this);
    }

    @Override
    public JItem as(Name alias) {
        return new JItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JItem rename(String name) {
        return new JItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItem rename(Name name) {
        return new JItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
