/*
 * This file is generated by jOOQ.
 */
package com.example.db.jooq.gen.tables.daos;


import com.example.db.jooq.gen.tables.JMsvUser;
import com.example.db.jooq.gen.tables.pojos.MsvUserVo;
import com.example.db.jooq.gen.tables.records.MsvUserRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MsvUserDao extends DAOImpl<MsvUserRecord, MsvUserVo, Integer> {

    /**
     * Create a new MsvUserDao without any configuration
     */
    public MsvUserDao() {
        super(JMsvUser.MSV_USER, MsvUserVo.class);
    }

    /**
     * Create a new MsvUserDao with an attached configuration
     */
    public MsvUserDao(Configuration configuration) {
        super(JMsvUser.MSV_USER, MsvUserVo.class, configuration);
    }

    @Override
    public Integer getId(MsvUserVo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MsvUserVo> fetchRangeOfJId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JMsvUser.MSV_USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<MsvUserVo> fetchByJId(Integer... values) {
        return fetch(JMsvUser.MSV_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public MsvUserVo fetchOneByJId(Integer value) {
        return fetchOne(JMsvUser.MSV_USER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MsvUserVo> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JMsvUser.MSV_USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<MsvUserVo> fetchByJName(String... values) {
        return fetch(JMsvUser.MSV_USER.NAME, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MsvUserVo> fetchRangeOfJCreatedAt(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(JMsvUser.MSV_USER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<MsvUserVo> fetchByJCreatedAt(Timestamp... values) {
        return fetch(JMsvUser.MSV_USER.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MsvUserVo> fetchRangeOfJUpdatedAt(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(JMsvUser.MSV_USER.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<MsvUserVo> fetchByJUpdatedAt(Timestamp... values) {
        return fetch(JMsvUser.MSV_USER.UPDATED_AT, values);
    }
}
